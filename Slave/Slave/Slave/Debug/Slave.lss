
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db9  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  00001221  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000089f  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  000022d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bd  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000458  00000000  00000000  000029a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00002df9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  64:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPin_Direction>:
			break;
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
			break;
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
  6c:	44 23       	and	r20, r20
  6e:	19 f0       	breq	.+6      	; 0x76 <DIO_SetPin_Direction+0xa>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	c9 f1       	breq	.+114    	; 0xe6 <DIO_SetPin_Direction+0x7a>
  74:	08 95       	ret
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	91 f0       	breq	.+36     	; 0x9e <DIO_SetPin_Direction+0x32>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPin_Direction+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	d9 f0       	breq	.+54     	; 0xb6 <DIO_SetPin_Direction+0x4a>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	29 f1       	breq	.+74     	; 0xce <DIO_SetPin_Direction+0x62>
  84:	08 95       	ret
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPin_Direction+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPin_Direction+0x22>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	8a bb       	out	0x1a, r24	; 26
  9c:	08 95       	ret
  9e:	27 b3       	in	r18, 0x17	; 23
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPin_Direction+0x3e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPin_Direction+0x3a>
  ae:	80 95       	com	r24
  b0:	82 23       	and	r24, r18
  b2:	87 bb       	out	0x17, r24	; 23
  b4:	08 95       	ret
  b6:	24 b3       	in	r18, 0x14	; 20
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_SetPin_Direction+0x56>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_SetPin_Direction+0x52>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	08 95       	ret
  ce:	21 b3       	in	r18, 0x11	; 17
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_SetPin_Direction+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_SetPin_Direction+0x6a>
  de:	80 95       	com	r24
  e0:	82 23       	and	r24, r18
  e2:	81 bb       	out	0x11, r24	; 17
  e4:	08 95       	ret
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	89 f0       	breq	.+34     	; 0x10c <DIO_SetPin_Direction+0xa0>
  ea:	28 f0       	brcs	.+10     	; 0xf6 <DIO_SetPin_Direction+0x8a>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	c9 f0       	breq	.+50     	; 0x122 <DIO_SetPin_Direction+0xb6>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	11 f1       	breq	.+68     	; 0x138 <DIO_SetPin_Direction+0xcc>
  f4:	08 95       	ret
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SetPin_Direction+0x96>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SetPin_Direction+0x92>
 106:	82 2b       	or	r24, r18
 108:	8a bb       	out	0x1a, r24	; 26
 10a:	08 95       	ret
 10c:	27 b3       	in	r18, 0x17	; 23
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPin_Direction+0xac>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPin_Direction+0xa8>
 11c:	82 2b       	or	r24, r18
 11e:	87 bb       	out	0x17, r24	; 23
 120:	08 95       	ret
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPin_Direction+0xc2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPin_Direction+0xbe>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
 136:	08 95       	ret
 138:	21 b3       	in	r18, 0x11	; 17
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPin_Direction+0xd8>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPin_Direction+0xd4>
 148:	82 2b       	or	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_TogglePin_Value>:
		break;
	}
}
void DIO_TogglePin_Value(uint8_t port, uint8_t pin)
{
	switch(port)
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	89 f0       	breq	.+34     	; 0x174 <DIO_TogglePin_Value+0x26>
 152:	28 f0       	brcs	.+10     	; 0x15e <DIO_TogglePin_Value+0x10>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	c9 f0       	breq	.+50     	; 0x18a <DIO_TogglePin_Value+0x3c>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	11 f1       	breq	.+68     	; 0x1a0 <DIO_TogglePin_Value+0x52>
 15c:	08 95       	ret
	{
		case DIO_PORTA:
		TGL_BIT(PORTA, pin);
 15e:	2b b3       	in	r18, 0x1b	; 27
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_TogglePin_Value+0x1c>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_TogglePin_Value+0x18>
 16e:	82 27       	eor	r24, r18
 170:	8b bb       	out	0x1b, r24	; 27
		break;
 172:	08 95       	ret
		case DIO_PORTB:
		TGL_BIT(PORTB, pin);
 174:	28 b3       	in	r18, 0x18	; 24
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_TogglePin_Value+0x32>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_TogglePin_Value+0x2e>
 184:	82 27       	eor	r24, r18
 186:	88 bb       	out	0x18, r24	; 24
		break;
 188:	08 95       	ret
		case DIO_PORTC:
		TGL_BIT(PORTC, pin);
 18a:	25 b3       	in	r18, 0x15	; 21
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_TogglePin_Value+0x48>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_TogglePin_Value+0x44>
 19a:	82 27       	eor	r24, r18
 19c:	85 bb       	out	0x15, r24	; 21
		break;
 19e:	08 95       	ret
		case DIO_PORTD:
		TGL_BIT(PORTD, pin);
 1a0:	22 b3       	in	r18, 0x12	; 18
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_TogglePin_Value+0x5e>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_TogglePin_Value+0x5a>
 1b0:	82 27       	eor	r24, r18
 1b2:	82 bb       	out	0x12, r24	; 18
 1b4:	08 95       	ret

000001b6 <LED0_Initialization>:
}
void LED2_OFF(void)
{
	
	//CLR_BIT(LED0_PORT, LED0_PIN);//LED-OFF
	DIO_SetPin_Value(LED2_PORT, LED2_PIN, LED_OFF);
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 1c0:	08 95       	ret

000001c2 <LED0_TGL>:
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_TogglePin_Value>
 1ca:	08 95       	ret

000001cc <LED1_Initialization>:
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	67 e0       	ldi	r22, 0x07	; 7
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 1d6:	08 95       	ret

000001d8 <LED1_TGL>:
 1d8:	67 e0       	ldi	r22, 0x07	; 7
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_TogglePin_Value>
 1e0:	08 95       	ret

000001e2 <LED2_Initialization>:
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPin_Direction>
 1ec:	08 95       	ret

000001ee <LED2_TGL>:
}
void LED2_TGL(void)
{
	//TGL_BIT(LED0_PORT, LED0_PIN);//LED-Toggle
	DIO_TogglePin_Value(LED2_PORT, LED2_PIN);
 1ee:	63 e0       	ldi	r22, 0x03	; 3
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_TogglePin_Value>
 1f6:	08 95       	ret

000001f8 <main>:
#include "LED.h"


int main(void)
{	//initializations
	SPI_Init();
 1f8:	0e 94 17 01 	call	0x22e	; 0x22e <SPI_Init>
	UART_Init();
 1fc:	0e 94 22 01 	call	0x244	; 0x244 <UART_Init>
	LED0_Initialization();
 200:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED0_Initialization>
	LED1_Initialization();
 204:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LED1_Initialization>
	LED2_Initialization();
 208:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <LED2_Initialization>
	uint8_t data; //uninitialized global variable to store data received by SPI
	
    
    while (1) 
    {
		data = SPI_Receive();
 20c:	0e 94 1e 01 	call	0x23c	; 0x23c <SPI_Receive>
		
		if(data == '1') //if data received by SPI is [1] , toggle first led
 210:	81 33       	cpi	r24, 0x31	; 49
 212:	19 f4       	brne	.+6      	; 0x21a <main+0x22>
		{
			LED0_TGL();
 214:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED0_TGL>
 218:	f9 cf       	rjmp	.-14     	; 0x20c <main+0x14>
		}
		
		else if(data == '2')//if data received by SPI is [2] , toggle second led
 21a:	82 33       	cpi	r24, 0x32	; 50
 21c:	19 f4       	brne	.+6      	; 0x224 <main+0x2c>
		{
			LED1_TGL();
 21e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LED1_TGL>
 222:	f4 cf       	rjmp	.-24     	; 0x20c <main+0x14>
		}
		
		else if(data == '3')//if data received by SPI is [3] , toggle third led
 224:	83 33       	cpi	r24, 0x33	; 51
 226:	91 f7       	brne	.-28     	; 0x20c <main+0x14>
		{
			LED2_TGL();
 228:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LED2_TGL>
 22c:	ef cf       	rjmp	.-34     	; 0x20c <main+0x14>

0000022e <SPI_Init>:
}
void SPI_Transmit(uint8_t data)
{
	SPDR = data;
	while (GET_BIT(SPSR, SPIF) != 1);
}
 22e:	bd 98       	cbi	0x17, 5	; 23
 230:	be 9a       	sbi	0x17, 6	; 23
 232:	bf 98       	cbi	0x17, 7	; 23
 234:	bc 98       	cbi	0x17, 4	; 23
 236:	83 e4       	ldi	r24, 0x43	; 67
 238:	8d b9       	out	0x0d, r24	; 13
 23a:	08 95       	ret

0000023c <SPI_Receive>:
uint8_t SPI_Receive(void)
{
	while (GET_BIT(SPSR, SPIF) != 1);
 23c:	77 9b       	sbis	0x0e, 7	; 14
 23e:	fe cf       	rjmp	.-4      	; 0x23c <SPI_Receive>
	return SPDR;
 240:	8f b1       	in	r24, 0x0f	; 15
}
 242:	08 95       	ret

00000244 <UART_Init>:
void UART_Init(void)
{
    /*Baud rate value variable*/
	uint16_t UBRR_Val = 9600;
	/*Enable Transmitter and Receiver bits*/
	UCSRB = (1 << RXEN) | (1 << TXEN);
 244:	88 e1       	ldi	r24, 0x18	; 24
 246:	8a b9       	out	0x0a, r24	; 10
	/*Full configuration for UART*/
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 248:	86 e8       	ldi	r24, 0x86	; 134
 24a:	80 bd       	out	0x20, r24	; 32
	/*Baud Rate Calculations*/
	UBRR_Val = (((FRQ) / (16 * BAUDRATE)) - 1);//00000000 11110101 00111001
	UBRRL = UBRR_Val;//00111001
 24c:	87 e6       	ldi	r24, 0x67	; 103
 24e:	89 b9       	out	0x09, r24	; 9
	UBRRH = UBRR_Val >> 8;//11110101
 250:	10 bc       	out	0x20, r1	; 32
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
